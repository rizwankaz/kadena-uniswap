;; Load modules
(load "../contracts/factory.pact")
(load "../contracts/pool-kdx.pact")

;; Create tables
(create-table pools)
(create-table pool)
(create-fungible-table "UNILP-KDX")

;; Install initial admin-keyset
(define-keyset 'admin-keyset (read-keyset "admin"))

;; Initialize pool
(uniswap.pool-kdx.init-pool "kaddex.kdx" "KDX")

;; Register pool in factory
(insert pools "KDX" {"pool": "pool-kdx"})

;; Simulate adding initial liquidity
(env-data {"sender": ["admin"]})
(uniswap.pool-kdx.add-liquidity 100.0 500.0 "admin")

;; Verify LP minted
(total-supply-v2 "UNILP-KDX")

;; Add second liquidity provider
(env-data {"sender": ["bob"]})
(uniswap.pool-kdx.add-liquidity 50.0 250.0 "bob")

;; Verify LP balances
(balance-of-v2 "UNILP-KDX" "admin")
(balance-of-v2 "UNILP-KDX" "bob")

;; Swap KDA to Token
(env-data {"sender": ["charlie"]})
(uniswap.pool-kdx.swap-kda-token 10.0 48.0 "charlie")

;; Swap Token to KDA
(env-data {"sender": ["dave"]})
(uniswap.pool-kdx.swap-token-kda 50.0 1.0 "dave")

;; Remove liquidity
(env-data {"sender": ["bob"]})
(uniswap.pool-kdx.remove-liquidity 25.0 "bob")

;; Verify final LP balance
(balance-of-v2 "UNILP-KDX" "bob")
